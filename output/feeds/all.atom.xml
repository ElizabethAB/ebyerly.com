<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>E. Byerly</title><link href="http://ebyerly.com/" rel="alternate"></link><link href="http://ebyerly.com/feeds/all.atom.xml" rel="self"></link><id>http://ebyerly.com/</id><updated>2016-06-22T00:00:00-04:00</updated><entry><title>Python Threading Examples</title><link href="http://ebyerly.com/python-threading-examples.html" rel="alternate"></link><published>2016-06-22T00:00:00-04:00</published><author><name>Elizabeth Byerly</name></author><id>tag:ebyerly.com,2016-06-22:python-threading-examples.html</id><summary type="html">&lt;p&gt;I am a huge fan of Python's &lt;a href="https://docs.python.org/3/"&gt;documentation&lt;/a&gt;. It's intuitive to navigate, the contents are easy to read, and it almost always provides great working examples of functions and modules in action.&lt;/p&gt;
&lt;p&gt;An unfortunate exception is Python's &lt;a href="https://docs.python.org/3/library/threading.html"&gt;&lt;code&gt;threading&lt;/code&gt; module&lt;/a&gt;. It is easy to use! You would have no idea of that looking at the docs!&lt;/p&gt;
&lt;p&gt;I'm going to bolster the doc's contents with three starter examples:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Threads that execute functions without arguments&lt;/li&gt;
&lt;li&gt;Threads that execute functions with arguments specified by placement and by keyword&lt;/li&gt;
&lt;li&gt;Threads that take advantage of &lt;a href="https://docs.python.org/3/library/asyncio-queue.html"&gt;&lt;code&gt;Queue&lt;/code&gt; objects&lt;/a&gt; to pull in their arguments while a function executes&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You can get fancy with threads, particularly by taking advantage of subclassing &lt;a href="https://docs.python.org/3/library/threading.html#thread-objects"&gt;&lt;code&gt;threading.Thread&lt;/code&gt;&lt;/a&gt;, but getting started with boring modifiable examples helps &lt;em&gt;me&lt;/em&gt; and now it can help &lt;em&gt;you&lt;/em&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;TL;DR&lt;/h3&gt;
&lt;p&gt;Create a thread:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;threading&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;some_func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;one&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;two&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;an_arg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;one&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;two&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;an_arg&lt;/span&gt;


&lt;span class="n"&gt;eg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;threading&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;some_func&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                      &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                      &lt;span class="n"&gt;kwargs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;an_arg&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Start the thread (run its target function):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;eg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Check if the thread's target function is still running (great for &lt;code&gt;while&lt;/code&gt; loops):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;eg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_alive&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Make your main program wait for a thread to finish:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;eg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;p&gt;Hey, wait, where's my output? Threads run separately from your main program and interact with it by a shared memory space. Try using a function that directly manipulates a global object (by declaration or by using a mutable object as an input).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;threading&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;some_func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;one&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;two&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;an_arg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;global&lt;/span&gt; &lt;span class="n"&gt;my_var&lt;/span&gt;
    &lt;span class="n"&gt;my_var&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;one&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;two&lt;/span&gt;
    &lt;span class="n"&gt;an_arg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_var&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;my_var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;my_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="n"&gt;eg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;threading&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;some_func&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                      &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                      &lt;span class="n"&gt;kwargs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;an_arg&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;my_list&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="n"&gt;eg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;eg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;my_var&lt;/span&gt;
&lt;span class="n"&gt;my_list&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Spoiler alert: &lt;a href="https://en.wikipedia.org/wiki/Concurrency_(computer_science)"&gt;concurrency&lt;/a&gt; can be &lt;a href="http://www.dabeaz.com/usenix2009/concurrent/race.py"&gt;hard&lt;/a&gt;. Python's &lt;code&gt;threading&lt;/code&gt; module has a lot of tools to help you deal with concurrency, none of which I'm going to deal with below. Just know you need to understand &lt;em&gt;when&lt;/em&gt; and &lt;em&gt;how&lt;/em&gt; multiple threads share objects if your use case needs them to share objects.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Threads that execute functions without arguments&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;threading&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;a_thread&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;log&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;warning&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Oh no, we&amp;#39;re in a thread!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;eg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;threading&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;a_thread&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;eg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;eg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Did you know that logging from a thread is stupid simple? Like, change-none-of-your-code simple? Yeah, me too, because the logging documentation has a &lt;a href="https://docs.python.org/3/howto/logging-cookbook.html#logging-from-multiple-threads"&gt;great example&lt;/a&gt; in its cookbook!&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Threads that execute functions with arguments specified by placement and by keyword&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;threading&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;a_thread_with_arguments&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arbitrary&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;log&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;warning&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Our arguments are &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt;, &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt;, &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arbitrary&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;eg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;threading&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;a_thread_with_arguments&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                      &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                      &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;arbitrary&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="n"&gt;eg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;eg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Oh, how about running multiple threads simultaneously...&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;threading&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;sleep&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;randint&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;a_thread_with_arguments&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arbitrary&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;log&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;warning&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Our arguments are &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt;, &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt;, &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arbitrary&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;curr_thread&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;threading&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;a_thread_with_arguments&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                       &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                                       &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;arbitrary&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="n"&gt;curr_thread&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h2&gt;Threads that take advantage of &lt;code&gt;Queue&lt;/code&gt; objects to pull in their arguments while a function executes&lt;/h2&gt;
&lt;p&gt;The closest thing I'm getting to an intermediate topic is an example of how to use Python's queues to pass arguments into running threads.&lt;/p&gt;
&lt;p&gt;We're going to use the &lt;code&gt;threading&lt;/code&gt; and &lt;code&gt;queue&lt;/code&gt; modules, of course, as well as the &lt;code&gt;logging&lt;/code&gt; module again.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;queue&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Queue&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;threading&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We change how the log files are written so that they explicitly tell us which thread creates an entry (&lt;code&gt;%(threadName)s&lt;/code&gt;).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ft&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Formatter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%(asctime)s&lt;/span&gt;&lt;span class="s"&gt;:&lt;/span&gt;&lt;span class="si"&gt;%(msecs)d&lt;/span&gt;&lt;span class="s"&gt;|&lt;/span&gt;&lt;span class="si"&gt;%(threadName)s&lt;/span&gt;&lt;span class="s"&gt;|&lt;/span&gt;&lt;span class="si"&gt;%(message)s&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                       &lt;span class="n"&gt;datefmt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%Y-%m-&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt; %H:%M:%S&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StreamHandler&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;ch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setFormatter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ft&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;log&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, we define a function that we're going to set as our threads' targets. It takes as its only argument a &lt;code&gt;Queue&lt;/code&gt; object. It runs forever (note our infinite &lt;code&gt;while True&lt;/code&gt; loop), always trying to get a value from its &lt;code&gt;a_queue&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;a_thread_with_queue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a_queue&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;log&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;queue_val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a_queue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;warning&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;This is &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;queue_val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;a_queue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;task_done&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finally, we make a &lt;code&gt;Queue&lt;/code&gt;, ten &lt;code&gt;Thread&lt;/code&gt;s all refering to our queue, and then feed our queue the integers 0-99 to print to our log!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;my_queue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Queue&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;my_threads&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;curr_thread&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;threading&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;a_thread_with_queue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                   &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_queue&lt;/span&gt;&lt;span class="p"&gt;,))&lt;/span&gt;
    &lt;span class="n"&gt;curr_thread&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;my_threads&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;curr_thread&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;my_queue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;See? Threading is easy.&lt;/p&gt;
&lt;p&gt;(...when we omit everything that makes threading hard. Let's call what I've covered the base case: not interesting on its own, but essential to understand before you get to the good stuff!)&lt;/p&gt;</summary><category term="python"></category><category term="threading"></category><category term="concurrence"></category></entry><entry><title>R, OO, and Mutability</title><link href="http://ebyerly.com/r-oo-and-mutability.html" rel="alternate"></link><published>2016-05-27T00:00:00-04:00</published><author><name>Elizabeth Byerly</name></author><id>tag:ebyerly.com,2016-05-27:r-oo-and-mutability.html</id><summary type="html">&lt;p&gt;A proposal at work: adapt an executable R script into a method using object oriented programming. The idea goes against my instincts, but I wasn't able to immediately articulate my concerns. I'm thinking through the issue here and deciding whether I'm being reasonable or knee-jerk (or just a jerk).&lt;/p&gt;
&lt;h3&gt;TL;DR&lt;/h3&gt;
&lt;p&gt;R's immutable objects are a barrier to using the language within an object oriented programming paradigm. Adding mutability to R is a solved problem, but it requires adding code complexity.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Mutability&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Immutable_object"&gt;Mutability&lt;/a&gt; is important to object oriented programming. Loosely, we can think of mutability as: can an object be changed after it is created? Changing an object is different than assigning over an object reference, in that effects calls to that object from every namespace and not only those namespaces where the assignment takes priority.&lt;/p&gt;
&lt;p&gt;Object oriented programming can be implemented in a world of immutable objects, but mutability makes attributes and stateful programming simpler to code and to think about. Mutable classes are staples in Java and Python (my coworker's and my preferred OO languages).&lt;/p&gt;
&lt;p&gt;R loves &lt;strong&gt;im&lt;/strong&gt;mutable objects. It copies obsessively. Every time you can conceive of the program generating and maintaining a separate copy of data, assume it is doing so. We can mimic mutable objects in R by manipulating namespaces, but it's difficult to code, to read, and to think about.&lt;/p&gt;
&lt;p&gt;An example of a "mutable" object in R is provided below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;createMutable &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="m"&gt;.&lt;/span&gt;mut &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kt"&gt;list&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;key &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; val &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    curr &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kp"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;.mut&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;is.null&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;val&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="kr"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;curr&lt;span class="p"&gt;)&lt;/span&gt;
    curr&lt;span class="p"&gt;[[&lt;/span&gt;key&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; val
    &lt;span class="m"&gt;.&lt;/span&gt;mut &lt;span class="o"&gt;&amp;lt;&amp;lt;-&lt;/span&gt; curr
    &lt;span class="kp"&gt;invisible&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;.&lt;/span&gt;mut&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

mutable &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; createMutable&lt;span class="p"&gt;()&lt;/span&gt;

mutable&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
mutable&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
mutable&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
mutable&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Functional v. OO programming&lt;/h2&gt;
&lt;p&gt;Immutable objects and &lt;a href="https://en.wikipedia.org/wiki/First-class_function"&gt;first-class functions&lt;/a&gt; make R great for functional programming. R's immutability was not an oversight.&lt;/p&gt;
&lt;p&gt;Functional programming is mocked as being an academic wheeze by-and-for mathematicians, but step back and remember R is a &lt;em&gt;statistical programming language&lt;/em&gt;. For statisticians, functional programming is a practical paradigm. It's easy to reason about a system where every input can be seen and fully understood at the point a function is called. It's easy to reason about a system where a "function" operates the same way a "function" has in your prior education - outputs solely dependent on inputs. When a PhD statistician's billing rate is $600+ an hour (as in my world), making everything but the statistics easy is a priority.&lt;/p&gt;
&lt;p&gt;Object oriented programming can be helpful in situations where a program has to account for an objective reality. Some examples of objective realities in software include a user's mouse location or the status of a network connection. When you are using R for applications programming, its lack of OO assets is a real hindrance, which is why R is never recommended for applications programming. &lt;/p&gt;
&lt;h2&gt;R's built-in OO&lt;/h2&gt;
&lt;p&gt;R does make a nod to object orientation.&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://stat.ethz.ch/R-manual/R-devel/library/base/html/UseMethod.html"&gt;S3&lt;/a&gt; and &lt;a href="https://stat.ethz.ch/R-manual/R-devel/library/methods/html/Classes.html"&gt;S4&lt;/a&gt; systems in R help us build genericized functions using &lt;a href="https://en.wikipedia.org/wiki/Dynamic_dispatch"&gt;method dispatch&lt;/a&gt; (that's why you can call &lt;code&gt;predict()&lt;/code&gt; on so many different model output objects). Aside from applications duplicated by named lists, that's their most interesting use case.&lt;/p&gt;
&lt;p&gt;Below is an example of an S4 class and its immutable behavior.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;setClass&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;eg&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; slots &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;attribute &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;numeric&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
my_obj &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; new&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;eg&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; attribute &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

my_obj&lt;span class="o"&gt;@&lt;/span&gt;attribute
my_obj&lt;span class="o"&gt;@&lt;/span&gt;attribute &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;
my_obj&lt;span class="o"&gt;@&lt;/span&gt;attribute

tmp &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;person&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  person&lt;span class="o"&gt;@&lt;/span&gt;attribute &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;
  &lt;span class="kr"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;person&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

tmp&lt;span class="p"&gt;(&lt;/span&gt;my_obj&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;@&lt;/span&gt;attribute
my_obj&lt;span class="o"&gt;@&lt;/span&gt;attribute
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;R introduced a third form of OO in version 2.12, &lt;a href="https://stat.ethz.ch/R-manual/R-devel/library/methods/html/refClass.html"&gt;RC&lt;/a&gt;, which includes mutability. I have encountered very few packages or community scripts (and none actively developed) that take advantage of RC's functionality. That is no guarantee of its quality, either way, but it means at least two things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Using RC at work means committing to training on RC, as few people have prior experience, and&lt;/li&gt;
&lt;li&gt;The R community does not feel a burning need for the mutability offered by RC.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Conclusions&lt;/h2&gt;
&lt;p&gt;I stand by my initial reaction. Without an argument for how our use case plays to object oriented programming's strengths, implementing an OO solution in R would add technical debt and code complexity.&lt;/p&gt;
&lt;p&gt;I have no interest in discouraging the debate at work. This exercise is helping to develop my understanding of R programming and being proven wrong only means learning something new, which would be great.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;Disclaimer&lt;/h3&gt;
&lt;p&gt;I love classes, mutability, and stateful programming. I use, and occasionally abuse, them in Python. I use R and Python differently and base my separation on what I hope to be a reasonable understanding of their relative strengths.&lt;/p&gt;</summary><category term="r"></category><category term="java"></category><category term="oo"></category><category term="mutability"></category></entry><entry><title>Website launched</title><link href="http://ebyerly.com/website-launched.html" rel="alternate"></link><published>2016-04-12T00:00:00-04:00</published><author><name>Elizabeth Byerly</name></author><id>tag:ebyerly.com,2016-04-12:website-launched.html</id><summary type="html">&lt;p&gt;This website relies on two public technologies:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.getpelican.com/"&gt;Pelican&lt;/a&gt; for conversion of Markdown into
    styled HTML&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/s3/"&gt;AWS S3&lt;/a&gt; for site hosting, accessed by
    &lt;a href="https://aws.amazon.com/cli/"&gt;AWS CLI&lt;/a&gt; for automated site updates&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Pelican is a good general tool for automatically generating static sites. My
complication was that I have static pages (slidedecks) that I want to be on my
site without any change to their HTML. I was able to build that into Pelican
with four additional steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Add my static pages and their associated support (images, Javascript, CSS) to
   a folder designated in the "pelicanconf.py" &lt;code&gt;STATIC_PATHS&lt;/code&gt; variable,&lt;/li&gt;
&lt;li&gt;Specify &lt;code&gt;READERS = {'html': None}&lt;/code&gt; in "pelicanconf.py" so it would not try to
   auto-publish the HTML pages with its templates,&lt;/li&gt;
&lt;li&gt;Make a simple Python script, "autopost.py", which trolls through the
   &lt;code&gt;STATIC_PATHS&lt;/code&gt; folders for HTML files:&lt;ol&gt;
&lt;li&gt;Confirming no corresponding Markdown file has already been made,&lt;/li&gt;
&lt;li&gt;Generating a Markdown file to be converted into a post by Pelican,
   linking to the static site and populated by the HTML's &lt;code&gt;meta&lt;/code&gt; properties,&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Modify Pelican's Makefile to&lt;ol&gt;
&lt;li&gt;Run the "autopost.py" file first,&lt;/li&gt;
&lt;li&gt;Run Pelican's default generation, and&lt;/li&gt;
&lt;li&gt;Post the updated content to my development site.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;When I am ready to publish, the Makefile also includes a flag that will do the
three steps above, except posting to my main landing page, ensuring I have an
updated "requirements.txt" file, and saving all changes to a git repository that
is &lt;a href="https://github.com/ElizabethAB/ebyerly.com"&gt;shared on GitHub&lt;/a&gt;.&lt;/p&gt;</summary><category term="pelican"></category><category term="publishing"></category></entry><entry><title>Data Intake: Defining, Cleaning and Merging</title><link href="http://ebyerly.com/data-intake-defining-cleaning-and-merging.html" rel="alternate"></link><published>2016-04-09T00:00:00-04:00</published><author><name>Elizabeth Byerly</name></author><id>tag:ebyerly.com,2016-04-09:data-intake-defining-cleaning-and-merging.html</id><summary type="html">&lt;p&gt;Slides: &lt;a href="http://ebyerly.com/presentations/data-intake-basic.html"&gt;Data Intake: Defining, Cleaning and Merging&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Press &lt;code&gt;P&lt;/code&gt; for presenter's notes.&lt;/p&gt;
&lt;p&gt;This presentation was developed to open &lt;a href="http://jpsm.umd.edu/event/asa-dc-datafest-2016"&gt;DC DataFest 2016&lt;/a&gt;,
as my small way to give participants an edge on what professional data intake
(i.e., wrestling with hideous data the first time you see it) looks like.&lt;/p&gt;</summary><category term="data"></category><category term="eda"></category><category term="ida"></category><category term="merging"></category><category term="cleaning"></category><category term="munging"></category></entry><entry><title>Automated R Clusters on AWS</title><link href="http://ebyerly.com/automated-r-clusters-on-aws.html" rel="alternate"></link><published>2016-02-17T00:00:00-05:00</published><author><name>Elizabeth Byerly</name></author><id>tag:ebyerly.com,2016-02-17:automated-r-clusters-on-aws.html</id><summary type="html">&lt;p&gt;Slides: &lt;a href="http://ebyerly.com/presentations/minimum-viable-cluster.html"&gt;Automated R Clusters on AWS&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Press &lt;code&gt;P&lt;/code&gt; for presenter's notes.&lt;/p&gt;
&lt;p&gt;A short presentation given at &lt;a href="http://www.meetup.com/stats-prog-dc/"&gt;Statistical Programming DC&lt;/a&gt;,
which I hope to have an excuse to expand on. It was the framework for
introducing my side project, &lt;a href="https://github.com/ElizabethAB/rcluster"&gt;rcluster&lt;/a&gt;,
which is a tool for launching a minimum viable R cluster on AWS.&lt;/p&gt;</summary><category term="r"></category><category term="aws"></category><category term="clusters"></category><category term="parallel"></category></entry><entry><title>Pseudo-Random Number Generators</title><link href="http://ebyerly.com/pseudo-random-number-generators.html" rel="alternate"></link><published>2016-02-05T00:00:00-05:00</published><author><name>Elizabeth Byerly</name></author><id>tag:ebyerly.com,2016-02-05:pseudo-random-number-generators.html</id><summary type="html">&lt;p&gt;Slides: &lt;a href="http://ebyerly.com/presentations/prngs.html"&gt;Pseudo-Random Number Generators&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Press &lt;code&gt;P&lt;/code&gt; for presenter's notes.&lt;/p&gt;
&lt;p&gt;I originally gave this presentation at &lt;a href="http://www.summitllc.us/"&gt;Summit Consulting&lt;/a&gt;
(&lt;a href="https://twitter.com/EdDieterle/status/695662703789133826"&gt;evidence&lt;/a&gt;). It was
half an excuse for me to research the PRNGs on which my analysis relies. I'd
love to have to dig this up with an opportunity to expand on non-statistical
uses.&lt;/p&gt;</summary><category term="r"></category><category term="stata"></category><category term="sas"></category><category term="python"></category><category term="prng"></category></entry><entry><title>Amazon Web Services for Data Analysis</title><link href="http://ebyerly.com/amazon-web-services-for-data-analysis.html" rel="alternate"></link><published>2015-11-12T00:00:00-05:00</published><author><name>Elizabeth Byerly</name></author><id>tag:ebyerly.com,2015-11-12:amazon-web-services-for-data-analysis.html</id><summary type="html">&lt;p&gt;Slides: &lt;a href="http://ebyerly.com/presentations/amazon-web-services-for-data-analysis.html"&gt;Amazon Web Services for Data Analysis&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.kretch.org/"&gt;David Kretch&lt;/a&gt; and I originally gave this presentation
at &lt;a href="http://www.summitllc.us/"&gt;Summit Consulting&lt;/a&gt;. I've tweaked it slightly to
speak to a broader audience of data analysts, but the take-homes haven't
changed (and probably won't until AWS significantly changes its offerings).&lt;/p&gt;
&lt;p&gt;This presentation was built using &lt;a href="http://rmarkdown.rstudio.com/"&gt;RMarkdown&lt;/a&gt;.&lt;/p&gt;</summary><category term="aws"></category><category term="cloud"></category><category term="ec2"></category><category term="rds"></category><category term="vpc"></category><category term="iam"></category><category term="emr"></category><category term="compliance"></category></entry><entry><title>Gitting Started: Git and GitLab</title><link href="http://ebyerly.com/gitting-started-git-and-gitlab.html" rel="alternate"></link><published>2015-10-05T00:00:00-04:00</published><author><name>Elizabeth Byerly</name></author><id>tag:ebyerly.com,2015-10-05:gitting-started-git-and-gitlab.html</id><summary type="html">&lt;p&gt;Slides: &lt;a href="http://ebyerly.com/presentations/gitting-started.html"&gt;Gitting Started: Git and GitLab&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Originally composed to get a team of Windows-based analysts with zero command
line experience working with Git and a private installation of GitLab. Here,
slightly tweaked to be general and speak to the publically accessible
&lt;a href="https://gitlab.com/"&gt;GitLab&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This presentation was built using &lt;a href="http://rmarkdown.rstudio.com/"&gt;RMarkdown&lt;/a&gt;.&lt;/p&gt;</summary><category term="git"></category><category term="gitlab"></category><category term="vcs"></category></entry><entry><title>Mapping in R</title><link href="http://ebyerly.com/mapping-in-r.html" rel="alternate"></link><published>2015-07-31T00:00:00-04:00</published><author><name>Elizabeth Byerly</name></author><id>tag:ebyerly.com,2015-07-31:mapping-in-r.html</id><summary type="html">&lt;p&gt;Slides: &lt;a href="http://ebyerly.com/presentations/mapping-in-r.html"&gt;Mapping in R&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://twitter.com/jacobpstein"&gt;Jacob Patterson-Stein&lt;/a&gt; and I originally gave this presentation at &lt;a href="http://www.summitllc.us/"&gt;Summit Consulting&lt;/a&gt;.&lt;/p&gt;</summary><category term="r"></category><category term="mapping"></category><category term="visualization"></category><category term="gis"></category><category term="apis"></category></entry><entry><title>Robust Regression: Theory and Implementation in R</title><link href="http://ebyerly.com/robust-regression-theory-and-implementation-in-r.html" rel="alternate"></link><published>2015-03-13T00:00:00-04:00</published><author><name>Elizabeth Byerly</name></author><id>tag:ebyerly.com,2015-03-13:robust-regression-theory-and-implementation-in-r.html</id><summary type="html">&lt;p&gt;Slides: &lt;a href="http://ebyerly.com/presentations/robust-regression.html"&gt;Robust Regression: Theory and Implementation in R&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Press &lt;code&gt;P&lt;/code&gt; for presenter's notes.&lt;/p&gt;
&lt;p&gt;This presentation provided motivation and structure while I dug into robust
regression methods under the advisement of &lt;a href="https://www.linkedin.com/in/george-cave-a1070878"&gt;Dr. George Cave&lt;/a&gt;.&lt;/p&gt;</summary><category term="regression"></category><category term="estimation"></category><category term="r"></category><category term="robust"></category></entry></feed>